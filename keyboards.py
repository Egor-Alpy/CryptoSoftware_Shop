from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from bot_creation import *
from data.database import *
from StatesGroups import *


cancel_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
cancel_markup.add(KeyboardButton('/cancel'))

b1 = InlineKeyboardButton('–°–æ—Ñ—Ç—ã', callback_data='–°–æ—Ñ—Ç—ã')
b2 = InlineKeyboardButton('–ö–∞–Ω–∞–ª', url='https://t.me/AT_industries')
menu_markup = InlineKeyboardMarkup()
menu_markup.add(b1, b2)

promocode_check_markup = InlineKeyboardMarkup()
b1 = InlineKeyboardButton('–î–∞', callback_data='do_have_a_promocode')
b2 = InlineKeyboardButton('–ù–µ—Ç', callback_data='do_not_have_a_promocode')
b3 = InlineKeyboardButton('üî∫ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='%–ù–∞–∑–∞–¥ –°–æ—Ñ—Ç')
promocode_check_markup.add(b1, b2).add(b3)


@dp.callback_query_handler(lambda call: call.data.startswith('do_have_a_promocode'))
async def back_to_soft_consideration_button(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer('‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è')
    '''await PaymentStatesGroup.promocode2.set()
    await bot.send_message(chat_id=callback.message.chat.id,
                                text='*–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥*',
                                parse_mode='markdown', reply_markup=cancel_markup)
'''


@dp.callback_query_handler(lambda call: call.data.startswith('do_not_have_a_promocode'))
async def back_to_soft_consideration_button(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer('‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è')
    '''await PaymentStatesGroup.promocode2.set()
    await bot.send_message(chat_id=callback.message.chat.id,
                                text='*–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥*',
                                parse_mode='markdown', reply_markup=cancel_markup)
'''


@dp.callback_query_handler(lambda call: call.data.startswith('%–ù–∞–∑–∞–¥ –°–æ—Ñ—Ç'))
async def back_to_soft_consideration_button(callback: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                text='*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –≤ –º–µ–Ω—é –Ω–∏–∂–µ!*',
                                parse_mode='markdown', reply_markup=menu_markup)


@dp.callback_query_handler(lambda call: call.data.startswith('–°–æ—Ñ—Ç—ã'))
async def soft_key_board(callback: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                text='*–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ñ—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º!*',
                                parse_mode='markdown', reply_markup=get_softs_inlinekeyboard())



b1 = InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data='–ö—É–ø–∏—Ç—å')
@dp.callback_query_handler(lambda call: call.data.startswith('–ö—É–ø–∏—Ç—å'))
async def buy_callback(callback: types.CallbackQuery, state: FSMContext):
    soft_name = (callback.message.text).split('\n')[0][10::]
    async with state.proxy() as data:
        data['soft_name'] = soft_name
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?', reply_markup=promocode_check_markup)

b2 = InlineKeyboardButton('üî∫ –ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥ –ü–æ–∫—É–ø–∫–∞')
@dp.callback_query_handler(lambda call: call.data.startswith('–ù–∞–∑–∞–¥ –ü–æ–∫—É–ø–∫–∞'))
async def back_from_description_menu(callback: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                text='*–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ñ—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º!*',
                                parse_mode='markdown', reply_markup=get_softs_inlinekeyboard())


soft_consideration = InlineKeyboardMarkup()
soft_consideration.add(b1, b2)


# ++++++++++++++++++++++++++++++++++++++++++++++ MARKUP FUNCTIONS +++++++++++++++++++++++++++++++++++++++++++++++++++++


def get_softs_inlinekeyboard():
    with sq.connect("db_atshop.db") as con:
        cur = con.cursor()
        cur.execute("SELECT name FROM software")
        rows = cur.fetchall()
        softs_markup = InlineKeyboardMarkup()
        for i in range(len(rows)):
            softs_markup.add(InlineKeyboardButton(rows[i][0], callback_data='SOFT'+rows[i][0]))

        softs_markup.add(InlineKeyboardButton('üî∫ –ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥ –ú–µ–Ω—é'))
        return softs_markup
@dp.callback_query_handler(lambda call: call.data.startswith('–ù–∞–∑–∞–¥ –ú–µ–Ω—é'))
async def back_from_soft_menu(callback: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                text='*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –≤ –º–µ–Ω—é –Ω–∏–∂–µ!*', parse_mode='markdown',
                                reply_markup=menu_markup)


def get_softs_inlinekeyboard_4delete():
    with sq.connect("db_atshop.db") as con:
        cur = con.cursor()
        cur.execute("SELECT name FROM software")
        rows = cur.fetchall()
        softs_markup = InlineKeyboardMarkup()
        for i in range(len(rows)):
            softs_markup.add(InlineKeyboardButton(rows[i][0], callback_data='$$$' + rows[i][0]))
        return softs_markup
@dp.callback_query_handler(lambda call: call.data.startswith('$$$'))
async def software_list_menu(callback: types.CallbackQuery):
    data_base.delsoft(callback.data[3:])
    await callback.message.edit_reply_markup(reply_markup=get_softs_inlinekeyboard_4delete())


def get_partners_inlinekeyboard_4delete():
    with sq.connect("db_atshop.db") as con:
        cur = con.cursor()
        cur.execute("SELECT user_id, name, promocode, discount, quantity FROM partners")
        rows = cur.fetchall()
        partners_markup = InlineKeyboardMarkup()
        for i in range(len(rows)):
            partners_markup.add(InlineKeyboardButton(f"name: {rows[i][1]}|id: {rows[i][0]}|promo: {rows[i][2]}|disc: {rows[i][3]}USDT|qty: {rows[i][4]}", callback_data='&&&' + str(rows[i][0])))
        return partners_markup
@dp.callback_query_handler(lambda call: call.data.startswith('&&&'))
async def admin_info_keyboard(callback: types.CallbackQuery):
    data_base.delpartner(callback.data[3:])
    await callback.message.edit_reply_markup(reply_markup=get_partners_inlinekeyboard_4delete())

@dp.callback_query_handler(lambda call: call.data.startswith('SOFT'))
async def chosen_soft(callback: types.CallbackQuery):
    data_list = data_base.select_software_info(callback.data[4:])[0]
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                text=f'<b><u>–ù–∞–∑–≤–∞–Ω–∏–µ</u>:</b> {data_list[0]}\n\n<b><u>–û–ø–∏—Å–∞–Ω–∏–µ</u>:</b> {data_list[1]}\n\n<b><u>–¶–µ–Ω–∞</u>:</b> {data_list[2]} USDT',
                                parse_mode='html', reply_markup=soft_consideration)